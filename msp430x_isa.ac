AC_ISA(msp430x){
  ac_helper {
/*
    #include "riscv_isa_helper.H"
*/
  };

  ac_format Type_DoubleOp =
    "%op:4 %rsrc:4 %ad:1 %bw:1 %as:2 %rdst:4";

  ac_format Type_SimpleOp =
    "%op:9 %bw:1 %ad:2 %rdst:4";

  ac_format Type_Jump =
    "%op:3 %cond:3 %offset:10";

  ac_format Type_PushPopM =
    "%op:6 %subop:2 %n1:4 %rdst1:4";

  ac_format Type_Extension =
    "%op:5 %payload_h:4 %al:1 %payload_l:6";

  ac_format Type_Extended_II =
    "%c:4 %n_1:2 %id:2 %id1:3 %w:1 %dst:4";

  // MSP430
  ac_instr<Type_DoubleOp> MOV, ADD, ADDC, SUB, SUBC, CMP, DADD, BIT, BIC, BIS, XOR, AND;
  ac_instr<Type_SimpleOp> RRC, RRA, PUSH, SWPB, CALL, RETI, SXT;
  ac_instr<Type_Jump>     JZ, JNZ, JC, JNC, JN, JGE, JL, JMP;
  ac_instr<Type_PushPopM> PUSHPOPM;
  ac_instr<Type_Extension> EXT;
  ac_instr<Type_Extended_II> RRCM, RRAM, RRUM, RLAM;

  //MSP430X specific register names
  ac_asm_map reg {
    "$"[0..31] = [0..31];
    "pc" = 0;
    "sp" = 1;
    "sr" = 2;
    "cgr" = 3;
  }

  ISA_CTOR(msp430x){
    MOV.set_decoder(op = 0x4);

    ADD.set_decoder(op = 0x5);

    ADDC.set_decoder(op = 0x6);

    SUBC.set_decoder(op = 0x7);

    SUB.set_decoder(op = 0x8);

    CMP.set_decoder(op = 0x9);

    DADD.set_decoder(op = 0xa);

    BIT.set_decoder(op = 0xb);

    BIC.set_decoder(op = 0xc);

    BIS.set_decoder(op = 0xd);

    XOR.set_decoder(op = 0xe);

    AND.set_decoder(op = 0xf);

    RRC.set_decoder(op = 0x20);

    SWPB.set_decoder(op = 0x21);

    RRA.set_decoder(op = 0x22);

    SXT.set_decoder(op = 0x23);

    PUSH.set_decoder(op = 0x24);

    CALL.set_decoder(op = 0x25);

    RETI.set_decoder(op = 0x26);

    JNZ.set_decoder(op = 0x1, cond=0x0);

    JZ.set_decoder(op = 0x1, cond=0x1);

    JNC.set_decoder(op = 0x1, cond=0x2);

    JC.set_decoder(op = 0x1, cond=0x3);

    JN.set_decoder(op = 0x1, cond=0x4);

    JGE.set_decoder(op = 0x1, cond=0x5);

    JL.set_decoder(op = 0x1, cond=0x6);

    JMP.set_decoder(op = 0x1, cond=0x7);

    PUSHPOPM.set_decoder(op = 0x5);

    EXT.set_decoder(op = 0x3);

    RRCM.set_decoder(c=0, id = 0, id1 = 2);
    RRAM.set_decoder(c=0, id = 1, id1 = 2);
    RLAM.set_decoder(c=0, id = 2, id1 = 2);
    RRUM.set_decoder(c=0, id = 3, id1 = 2);
  };
};
